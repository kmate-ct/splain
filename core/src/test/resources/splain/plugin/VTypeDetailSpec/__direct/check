
newSource1.scala:15: error: type mismatch;
  Test.F[Test.a.type|a.type]
      wrongf(new A)(new F[AA])
                    ^
newSource1.scala:16: error: implicit error;
!I b: Test.F[a.type]
      wrongf(new A)
            ^
newSource1.scala:15: error: type mismatch;
  Test.F[
    Test.a.type (with underlying type Test.A)|a.type (with underlying type a.type)
  ]
      wrongf(new A)(new F[AA])
                    ^
newSource1.scala:16: error: implicit error;
!I b: Test.F[a.type (with underlying type a.type)]
      wrongf(new A)
            ^
newSource1.scala:15: error: type mismatch;
  Test.F[
    Test.a.type (with underlying type Test.A)|a.type (with underlying type a.type) where val a: Test.A
  ]
      wrongf(new A)(new F[AA])
                    ^
newSource1.scala:16: error: implicit error;
!I b: Test.F[a.type (with underlying type a.type) where val a: Test.A]
      wrongf(new A)
            ^
newSource1.scala:15: error: type mismatch;
  Test.F[
    Test.a.type (with underlying type Test.A)|a.type (with underlying type a.type) where val a: Test.A
    ――(left side reduced from)
      Test.AA
  ]
      wrongf(new A)(new F[AA])
                    ^
newSource1.scala:16: error: implicit error;
!I b: Test.F[a.type (with underlying type a.type) where val a: Test.A]
      wrongf(new A)
            ^

newSource1.scala:15: error: type mismatch;
  Test.F[
    Test.a.type (with underlying type Test.A)|a.type (with underlying type a.type) where val a: Test.A (defined at newSource1.scala:13:18)
    ――(left side reduced from)
      Test.AA
  ]
      wrongf(new A)(new F[AA])
                    ^
newSource1.scala:16: error: implicit error;
!I b:
  Test.F[
    a.type (with underlying type a.type) where val a: Test.A
    ――(defined at newSource1.scala:13:18)
  ]
  ――(defined at newSource1.scala:8:13)
      wrongf(new A)
            ^

newSource1.scala:15: error: type mismatch;
  Test.F[
    Test.a.type (with underlying type Test.A)|a.type (with underlying type a.type) where val a: Test.A (defined at newSource1.scala:13:18)
    ――(left side reduced from)
      Test.AA
    (which expands to)  Test.a.type
  ]
      wrongf(new A)(new F[AA])
                    ^
newSource1.scala:16: error: implicit error;
!I b:
  Test.F[
    a.type (with underlying type a.type) where val a: Test.A
    ――(defined at newSource1.scala:13:18)
  ]
  ――(defined at newSource1.scala:8:13)
      wrongf(new A)
            ^
newSource1.scala:5: error: implicit error;
!I e: String :: Int :: Boolean
      implicitly[K]
                ^
newSource1.scala:7: error: type mismatch;
  String("abc")|String :: Int :: Boolean
      def v: K = "abc"
                 ^
newSource1.scala:5: error: implicit error;
!I e: String :: Int :: Boolean (reduced from) { Test.K }
      implicitly[K]
                ^
newSource1.scala:7: error: type mismatch;
  String("abc")|String :: Int :: Boolean
  ――(right side reduced from)
    Test.K
      def v: K = "abc"
                 ^
